<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>About - Rawad Al-Haras</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/dark-theme.css">
    <link rel="stylesheet" href="/css/projects.css">
</head>
<style>
  /* Match homepage interaction: disable native scroll while swapping */
  html, body { height: 100%; overflow: hidden; overscroll-behavior: none; }

  /* Container to center hero and panels like homepage */
  .about-content-container {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .about-panel {
    position: absolute;
    top: 50%; left: 50%;
    transform: translate(-50%, -50%);
    width: min(900px, 92vw);
    text-align: left;
    opacity: 0; visibility: hidden;
    z-index: 11;
  }
  .about-panel p { color: var(--text-secondary); line-height: 1.8; font-size: 1.1rem; }
  @media (max-width: 768px) { .about-panel p { font-size: 1rem; } }
</style>
<body>
    <div class="bubble-container" id="bubbleContainer"></div>
    <div class="glow-border"></div>
    <div class="glow-border-left"></div>
    <div class="glow-border-right"></div>

    <% include('partials/nav', { isFiancee: (typeof user !== 'undefined' && user && user.role === 'fiancee') }) %>

    <div class="main-container">
        <div class="about-content-container">
            <section class="hero-section">
                <h1 class="hero-title"><span class="gradient-text">About Me</span></h1>
                <p class="hero-subtitle">A blend of data, code, and curiosity — building experiences with intention.</p>
            </section>

            <!-- Panels rendered in the same centered spot as hero -->
            <article class="about-panel" data-idx="0"><p>I've always had a love-hate relationship with computers: I love them when they work and hate them when they don’t. After high school, I flirted with the idea of understanding how these mysterious boxes worked. But life had other plans, and I took a two-year hiatus. Like all great stories, though, mine had a comeback! In the summer of 2022, I rekindled that old flame and dove headfirst into the world of technology by joining Western University to pursue a degree in Computer Science and Political Science.</p></article>
            <article class="about-panel" data-idx="1"><p>Now, I’m deeply immersed in the data field, exploring the intersection of data development, machine learning, and AI. My work with companies like ADA Analytics and Maskwa Gourmet Foods sharpened my skills in backend development and data management. Starting May 2025, I’ll be a Data Developer intern at Celestica, where I’ll work closely with Oracle and Power BI, blending my passion for data with AI-driven solutions to create impactful, real-world applications.</p></article>
            <article class="about-panel" data-idx="2"><p>My passion for front-end and web development shows through my projects. I work with HTML, CSS, JavaScript, and frameworks such as NodeJS, ReactJS, and ExpressJS. I’ve designed and developed multiple websites and continue to refine my craft. I also work with React Native and Swift for mobile development, building robust and user-friendly applications.</p></article>
            <article class="about-panel" data-idx="3"><p>Outside of tech, I enjoy soccer and weightlifting, which keep me focused and disciplined. I care about building meaningful products and working with great teams — and I’m always learning.</p></article>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script>
        // Mobile nav toggle
        const hamburger = document.getElementById('hamburger');
        const navMenu = document.getElementById('nav-menu');
        if (hamburger && navMenu) {
            hamburger.addEventListener('click', () => {
                hamburger.classList.toggle('active');
                navMenu.classList.toggle('active');
            });
        }

        // Bubbles
        function createBubble() {
            const bubble = document.createElement('div');
            bubble.className = 'bubble';
            const size = Math.random() * 100 + 50;
            bubble.style.width = size + 'px';
            bubble.style.height = size + 'px';
            bubble.style.left = Math.random() * window.innerWidth + 'px';
            bubble.style.animationDuration = (Math.random() * 20 + 10) + 's';
            bubble.style.animationDelay = Math.random() * 5 + 's';
            document.getElementById('bubbleContainer').appendChild(bubble);
            setTimeout(() => bubble.remove(), 30000);
        }
        setInterval(createBubble, 2000);
        for (let i = 0; i < 5; i++) setTimeout(createBubble, i * 500);

        // Use the same panel slider logic as homepage, but for about panels
        (function initAboutPanels(){
            const panels = Array.from(document.querySelectorAll('.about-panel'));
            const hero = document.querySelector('.hero-section');
            if (!panels.length) return;

            function setup(){
                let currentIndex = -1; // -1 hero, 0..n panels
                let isAnimating = false; let gestureLocked = false;

                // init hidden panels and visible hero
                panels.forEach(p => gsap.set(p, { opacity: 0, visibility: 'hidden', y: 50 }));
                gsap.set(hero, { opacity: 1, visibility: 'visible', y: 0 });

                function showContent(next){
                    if (isAnimating) return; isAnimating = true;
                    const currentEl = currentIndex === -1 ? hero : panels[currentIndex];
                    gsap.to(currentEl, { opacity: 0, y: -30, duration: 0.3, ease: 'power2.in', onComplete(){
                        gsap.set(currentEl, { visibility: 'hidden' });
                        const newEl = next === -1 ? hero : panels[next];
                        gsap.set(newEl, { visibility: 'visible', y: 30, opacity: 0 });
                        gsap.to(newEl, { opacity: 1, y: 0, duration: 0.4, ease: 'power2.out', onComplete(){ currentIndex = next; isAnimating=false; gestureLocked=false; } });
                    }});
                }

                function handleScroll(dir){
                    if (gestureLocked || isAnimating) return; gestureLocked = true;
                    let acted = false;
                    if (dir > 0){
                        if (currentIndex === -1){ showContent(0); acted = true; }
                        else if (currentIndex < panels.length-1){ showContent(currentIndex+1); acted=true; }
                    } else if (dir < 0){
                        if (currentIndex === 0){ showContent(-1); acted=true; }
                        else if (currentIndex > 0){ showContent(currentIndex-1); acted=true; }
                    }
                    if (!acted) gestureLocked = false;
                }

                // Wheel accum heavy like homepage
                let wheelAccum = 0; let timer=null; const wheelThreshold=120;
                function onWheel(e){ e.preventDefault(); if (gestureLocked || isAnimating) return; const dy=e.deltaY||0; if(Math.abs(dy)<1) return; wheelAccum += dy; clearTimeout(timer); timer=setTimeout(()=>{wheelAccum=0;},300); if(Math.abs(wheelAccum)>=wheelThreshold){ const dir = wheelAccum>0?1:-1; wheelAccum=0; handleScroll(dir); } }
                function onKey(e){ if(e.key==='ArrowDown'||e.key==='PageDown'){ e.preventDefault(); handleScroll(1);} else if(e.key==='ArrowUp'||e.key==='PageUp'){ e.preventDefault(); handleScroll(-1);} }
                let tsY=null, sw=false; function onTouchStart(e){ if(e.touches&&e.touches.length===1){ tsY=e.touches[0].clientY; sw=false; }} function onTouchMove(e){ if(tsY===null||sw) return; const d=tsY-e.touches[0].clientY; if(Math.abs(d)>80){ e.preventDefault(); sw=true; handleScroll(d); }} function onTouchEnd(){ tsY=null; sw=false; }

                window.addEventListener('wheel', onWheel, { passive:false });
                window.addEventListener('keydown', onKey);
                window.addEventListener('touchstart', onTouchStart, { passive:true });
                window.addEventListener('touchmove', onTouchMove, { passive:false });
                window.addEventListener('touchend', onTouchEnd, { passive:true });
            }

            if (typeof gsap==='undefined'){ const s=document.createElement('script'); s.src='https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js'; s.onload=setup; document.body.appendChild(s);} else { setup(); }
        })();
    </script>
</body>
</html>
